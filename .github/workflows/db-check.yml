name: db-check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  db-check:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify Supabase REST is reachable
        shell: bash
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
        run: |
          base="${SUPABASE_URL%/}/rest/v1"
          code=$(curl -sS -o /dev/null -w "%{http_code}" \
            -H "apikey: ${SUPABASE_SERVICE_ROLE}" \
            -H "Authorization: Bearer ${SUPABASE_SERVICE_ROLE}" \
            "$base")
          echo "REST status: $code"
          if [ "$code" -lt 200 ] || [ "$code" -ge 500 ]; then
            echo "REST unreachable or server error"
            exit 1
          fi

      - name: Query repo table counts (repo_chunks, repo_memory)
        shell: bash
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
        run: |
          python3 - << 'PY'
import os, json, urllib.request, sys

BASE = os.environ["SUPABASE_URL"].rstrip("/") + "/rest/v1"
HDRS = {
  "apikey": os.environ["SUPABASE_SERVICE_ROLE"],
  "Authorization": f"Bearer {os.environ['SUPABASE_SERVICE_ROLE']}",
  "Accept": "application/json",
  "Content-Type": "application/json",
  "Prefer": "count=exact"
}

def count(table: str):
  # Ask for 1 row and parse Content-Range total
  req = urllib.request.Request(f"{BASE}/{table}?select=*&limit=1", headers=HDRS)
  with urllib.request.urlopen(req, timeout=30) as r:
    cr = dict(r.getheaders()).get("Content-Range","*/0")
    try:
      return int(cr.split("/")[-1])
    except Exception:
      return None

chunks = count("repo_chunks")
memory = count("repo_memory")

print(f"repo_chunks: {chunks}")
print(f"repo_memory: {memory}")

if chunks is None or memory is None:
  print("ERROR: Missing tables (repo_chunks or repo_memory).", file=sys.stderr)
  sys.exit(2)
PY

      - name: Add summary
        if: always()
        shell: bash
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        run: |
          {
            echo "### DB check"
            echo ""
            echo "- Supabase URL: ${SUPABASE_URL}"
            echo "- Verified REST reachability and counted \`repo_chunks\` / \`repo_memory\`."
            echo "- See step logs above for exact counts."
          } >> "$GITHUB_STEP_SUMMARY"
