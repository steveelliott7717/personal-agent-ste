{
    "task": {
        "repo": "personal-agent-ste",
        "branch": "main",
        "path_prefix": "backend/",
        "k": 1,
        "session": "reqlog-final-002",
        "task": "Add minimal request logging middleware to backend/ that assigns a UUID correlation ID per HTTP request (store on request.state.correlation_id and ContextVar), ensures all log lines include %(correlation_id)s via a logging.Filter, and logs ONE completion line per request with method, path, status, and duration_ms. Make logging controlled by env LOG_REQUESTS (default true; treat true/1/yes/on case-insensitively). Avoid duplicate handlers if configure_logging() is called multiple times. Use package-qualified imports (backend.logging_utils, backend.middleware.request_logging). No API response shape changes; no heavy dependencies.\n\nAcceptance criteria:\n1) backend/logging_utils.py: ContextVar, CorrelationIdFilter, configure_logging() that sets format including %(correlation_id)s and avoids duplicate handlers.\n2) backend/middleware/request_logging.py: middleware that sets request.state.correlation_id, times the request, logs a single info line at end when LOG_REQUESTS is enabled, and clears/resets context.\n3) backend/main.py: import configure_logging and middleware; call configure_logging() once; add middleware.\n4) All paths confined to backend/; unified diff applies cleanly with LF newlines.\n\nVerification steps:\n- With LOG_REQUESTS unset (default true), call /health → see single line: \"Request completed method=GET path=/health status=200 duration_ms=... correlation_id=...\".\n- Set LOG_REQUESTS=false, restart, call /health → no request completion log, but correlation_id is set on request.state.\n- No duplicate log lines across restarts; no import errors."
    }
}