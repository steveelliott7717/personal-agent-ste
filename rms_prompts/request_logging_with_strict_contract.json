{
    "task": "Role: Implement minimal request logging middleware with correlation IDs in backend/. Context: Add middleware that assigns a unique correlation ID to each incoming HTTP request, stores it in request.state.correlation_id, logs request method, path, status code, duration in ms, and ensures correlation ID is included in all log lines for that request. Make logging configurable via env var LOG_REQUESTS (default true). No API response shape changes. Use existing logging configuration patterns or create a small helper. Requirements: Add middleware class to backend/middleware/ that generates a UUID per request, sets it in contextvar for log filter, and logs after request completion. Update FastAPI app init to include this middleware. Modify logging setup so correlation ID appears in every log line. Constraints: Minimal safe change; no heavy dependencies; respect path_prefix=backend/; must not break existing routes or logging. Acceptance Criteria: Middleware installed; correlation ID appears in logs; controlled via LOG_REQUESTS env var; default true. Verification: 1) Start app with LOG_REQUESTS=true; hit any endpoint; see log entries with correlation ID. 2) Start app with LOG_REQUESTS=false; no request log lines are emitted. 3) Patch applies cleanly with git apply --whitespace=fix. 4) App runs without errors. HARD OUTPUT CONTRACT (NON-NEGOTIABLE): Return ONLY a valid, git-apply-ready unified diff starting with: diff --git a/<path> b/<path>. No prose, no explanations, no markdown/code fences, no JSON, no logs, no ellipses (...), no placeholders. Do not include 'index ...' lines unless valid Git diff metadata. Do not include extra comment blocks unrelated to the task. Always produce a non-empty patch; if no code change is strictly needed, add a harmless no-op comment inside backend/. All files must: Use LF line endings; be UTF-8 without BOM; apply cleanly with: git apply --whitespace=fix. REQUIRED DIFF FORMAT: Each file change must start with diff --git a/<path> b/<path>, optional new file mode 100644 for new files, --- a/<path> (or --- /dev/null for new files), +++ b/<path>, and a correct @@ hunk header. Include only files under backend/. Ensure new file creations use /dev/null source and correct mode when needed. Forbidden patterns in patch output: ``` , ^\\.\\.\\.$ , /\\*.*?\\*/ (unless specifically requested in the task), or any prose outside code. Fallback / No-Op Rule: If you determine no functional changes are required, output a valid diff that modifies (or adds) only a comment inside backend/, e.g., # RMS GPT no-op touch: <UTC timestamp>. Decision Logic (Internalâ€”Do Not Print): Plan minimal changes to satisfy requirements & acceptance criteria; edit/create files under backend/ only; build a single unified diff; output only that diff; if about to violate contract, stop and output a no-op diff.",
    "repo": "personal-agent-ste",
    "branch": "main",
    "path_prefix": "backend/",
    "k": 12,
    "session": "s1"
}