diff --git a/backend/logging_utils.py b/backend/logging_utils.py
new file mode 100644
--- /dev/null
+++ b/backend/logging_utils.py
@@ -0,0 +1,14 @@
+from contextvars import ContextVar
+import logging
+
+correlation_id_var = ContextVar("correlation_id", default="-")
+
+class CorrelationIdFilter(logging.Filter):
+    def filter(self, record):
+        record.correlation_id = correlation_id_var.get()
+        return True
+
+def configure_logging():
+    logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s - %(correlation_id)s')
+    logging.getLogger().addFilter(CorrelationIdFilter())
+
diff --git a/backend/middleware/request_logging.py b/backend/middleware/request_logging.py
new file mode 100644
--- /dev/null
+++ b/backend/middleware/request_logging.py
@@ -0,0 +1,22 @@
+import os
+import uuid
+from contextvars import ContextVar
+from starlette.middleware.base import BaseHTTPMiddleware
+
+correlation_id_var = ContextVar("correlation_id", default="-")
+
+class RequestLoggingMiddleware(BaseHTTPMiddleware):
+    async def dispatch(self, request, call_next):
+        correlation_id = str(uuid.uuid4())
+        correlation_id_var.set(correlation_id)
+        request.state.correlation_id = correlation_id
+
+        response = await call_next(request)
+
+        if os.getenv("LOG_REQUESTS") == "true":
+            # Log request details here
+            pass
+
+        correlation_id_var.set("-")
+        return response
+
diff --git a/backend/main.py b/backend/main.py
index 4c3e5c1..c3e5c1e 100644
--- a/backend/main.py
+++ b/backend/main.py
@@ -1,16 +1,19 @@
 from __future__ import annotations
+from backend.logging_utils import configure_logging
 from fastapi import FastAPI, Request, HTTPException
 from fastapi.responses import JSONResponse, RedirectResponse, HTMLResponse, FileResponse
 from fastapi.staticfiles import StaticFiles
 from starlette.middleware.base import BaseHTTPMiddleware
+from backend.middleware.request_logging import RequestLoggingMiddleware
 
 load_dotenv()
 
 app = FastAPI(title="Personal Agent API")
+configure_logging()
 app.add_middleware(RequestLoggingMiddleware)
 
 # backend/main.py
 # -------------------- Health --------------------
 @app.get("/health")
 def health():
     return {"status": "ok"}