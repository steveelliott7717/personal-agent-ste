diff --git a/backend/logging_utils.py b/backend/logging_utils.py
new file mode 100644
--- /dev/null
+++ b/backend/logging_utils.py
@@ -0,0 +1,25 @@
+import logging
+import contextvars
+
+correlation_id_var = contextvars.ContextVar("correlation_id", default=None)
+
+class CorrelationIdFilter(logging.Filter):
+    def filter(self, record):
+        record.correlation_id = correlation_id_var.get() or "-"
+        return True
+
+def configure_logging():
+    logging.basicConfig(
+        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s - %(correlation_id)s',
+        level=logging.INFO,
+    )
+    logging.getLogger().addFilter(CorrelationIdFilter())
+
+/* RMS GPT no-op touch: 2023-10-01T00:00:00Z */ 

diff --git a/backend/middleware/request_logging.py b/backend/middleware/request_logging.py
new file mode 100644
--- /dev/null
+++ b/backend/middleware/request_logging.py
@@ -0,0 +1,40 @@
+import time
+import uuid
+import logging
+from fastapi import Request, Response
+from starlette.middleware.base import BaseHTTPMiddleware
+from backend.logging_utils import correlation_id_var
+
+LOG_REQUESTS = True  # Set to False to disable logging
+
+class RequestLoggingMiddleware(BaseHTTPMiddleware):
+    async def dispatch(self, request: Request, call_next):
+        correlation_id = str(uuid.uuid4())
+        correlation_id_var.set(correlation_id)
+
+        start_time = time.time()
+        response: Response = await call_next(request)
+        duration = time.time() - start_time
+
+        if LOG_REQUESTS:
+            logging.info(
+                "Request completed",
+                extra={
+                    "method": request.method,
+                    "path": request.url.path,
+                    "status": response.status_code,
+                    "duration_ms": duration * 1000,
+                    "correlation_id": correlation_id,
+                }
+            )
+
+        return response
+
+/* RMS GPT no-op touch: 2023-10-01T00:00:00Z */ 

diff --git a/backend/main.py b/backend/main.py
@@ -1,6 +1,7 @@
 from __future__ import annotations
 import os
 import json
 from typing import Any, Dict, Tuple
+from backend.middleware.request_logging import RequestLoggingMiddleware
 from fastapi import FastAPI, Request, HTTPException
 from fastapi.responses import JSONResponse, RedirectResponse, HTMLResponse, FileResponse
 from fastapi.staticfiles import StaticFiles
@@ -23,6 +24,7 @@
 app = FastAPI(title="Personal Agent API")
 
 # Add middleware
+app.add_middleware(RequestLoggingMiddleware)
 
 @app.get("/app/api/debug/supabase-key")
 async def debug_supabase_key():
```