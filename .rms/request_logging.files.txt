BEGIN_FILE backend/logging_utils.py
import logging
import uuid
from contextvars import ContextVar
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.requests import Request
from starlette.responses import Response
import os

correlation_id_var: ContextVar[str] = ContextVar("correlation_id", default="")

class CorrelationIdFilter(logging.Filter):
    def filter(self, record):
        record.correlation_id = correlation_id_var.get()
        return True

def setup_logging():
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger()
    logger.addFilter(CorrelationIdFilter())

class RequestLoggingMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        correlation_id = str(uuid.uuid4())
        correlation_id_var.set(correlation_id)
        request.state.correlation_id = correlation_id

        log_requests = os.getenv("LOG_REQUESTS", "true").lower() in {"true", "1", "t", "yes"}
        if log_requests:
            logger.info(f"Start request: {request.method} {request.url} - Correlation ID: {correlation_id}")

        response: Response = await call_next(request)

        response.headers["X-Correlation-ID"] = correlation_id

        if log_requests:
            logger.info(f"End request: {request.method} {request.url} - Correlation ID: {correlation_id}")

        return response
END_FILE
BEGIN_FILE backend/main.py
from fastapi import FastAPI
from backend.logging_utils import setup_logging, RequestLoggingMiddleware

app = FastAPI(...)

setup_logging()
app.add_middleware(RequestLoggingMiddleware)

# Existing load_dotenv(...) and CORS config remain unchanged
END_FILE
