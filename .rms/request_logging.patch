diff --git a/backend/logging_utils.py b/backend/logging_utils.py
--- a/backend/logging_utils.py
+++ b/backend/logging_utils.py
@@ -0,0 +1,6 @@
+# RMS GPT no-op touch: 2023-10-05T12:00:00Z (Python)
+from contextvars import ContextVar
+import logging
+
+correlation_id = ContextVar("correlation_id", default=None)
+
+class CorrelationIdFilter(logging.Filter):
diff --git a/backend/middleware/request_logging.py b/backend/middleware/request_logging.py
--- a/backend/middleware/request_logging.py
+++ b/backend/middleware/request_logging.py
@@ -0,0 +1,12 @@
+# RMS GPT no-op touch: 2023-10-05T12:00:00Z (Python)
+import logging
+import uuid
+from starlette.middleware.base import BaseHTTPMiddleware
+from starlette.middleware.cors import CORSMiddleware
+from fastapi import Request
+
+LOG_REQUESTS = True  # Default to true; can be overridden by environment variable
+
+class RequestLoggingMiddleware(BaseHTTPMiddleware):
+    async def dispatch(self, request: Request, call_next):
+        correlation_id = str(uuid.uuid4())
+        logging.info(f"Request {correlation_id}: {request.method} {request.url}")
diff --git a/backend/main.py b/backend/main.py
--- a/backend/main.py
+++ b/backend/main.py
@@ -1,6 +1,7 @@
 from __future__ import annotations
 import os
 import json
+import logging
 from typing import Any, Dict, Tuple
 from fastapi import FastAPI, Request, HTTPException
 from fastapi.responses import JSONResponse, RedirectResponse, HTMLResponse, FileResponse
@@ -10,6 +11,7 @@
 from dotenv import load_dotenv
 load_dotenv()
 
+logging.basicConfig(level=logging.INFO)
 app = FastAPI(title="Personal Agent API")
 
 # -------------------- Middleware --------------------
@@ -20,6 +22
 app.add_middleware(RequestLoggingMiddleware)
 
 # -------------------- Health --------------------
 @app.get("/health")
 def health():
     return {"status": "ok"}