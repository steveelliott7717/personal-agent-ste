diff --git a/backend/logging_utils.py b/backend/logging_utils.py
--- /dev/null
+++ b/backend/logging_utils.py
@@ -0,0 +1,34 @@
+from contextvars import ContextVar
+import logging
+
+correlation_id_var = ContextVar("correlation_id", default=None)
+
+def get_correlation_id() -> str:
+    """Retrieve the current correlation ID."""
+    return correlation_id_var.get()
+
+def set_correlation_id(correlation_id: str) -> None:
+    """Set the current correlation ID."""
+    correlation_id_var.set(correlation_id)
+
+class CorrelationIdFilter(logging.Filter):
+    """Logging filter to add correlation ID to log records."""
+
+    def filter(self, record: logging.LogRecord) -> bool:
+        record.correlation_id = get_correlation_id()
+        return True
+
+def configure_logging() -> None:
+    """Configure logging with correlation ID support."""
+    logging.basicConfig(level=logging.INFO)
+    logger = logging.getLogger()
+    logger.addFilter(CorrelationIdFilter())
+
+    # Optionally, you can add a custom formatter to include the correlation ID in log messages
+    handler = logging.StreamHandler()
+    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s - Correlation ID: %(correlation_id)s')
+    handler.setFormatter(formatter)
+    logger.addHandler(handler)
+
+    logging.info("Logging configured with correlation ID support.")
+
diff --git a/backend/middleware/request_logging.py b/backend/middleware/request_logging.py
--- /dev/null
+++ b/backend/middleware/request_logging.py
@@ -0,0 +1,21 @@
+import logging
+import uuid
+from starlette.middleware.base import BaseHTTPMiddleware
+from starlette.requests import Request
+from starlette.responses import Response
+from backend.logging_utils import set_correlation_id
+
+class RequestLoggingMiddleware(BaseHTTPMiddleware):
+    async def dispatch(self, request: Request, call_next):
+        correlation_id = str(uuid.uuid4())
+        set_correlation_id(correlation_id)
+
+        logging.info(f"Start request: {request.method} {request.url} - Correlation ID: {correlation_id}")
+        response: Response = await call_next(request)
+        logging.info(f"End request: {request.method} {request.url} - Status: {response.status_code} - Correlation ID: {correlation_id}")
+
+        return response
+
+def add_request_logging(app):
+    app.add_middleware(RequestLoggingMiddleware)
+
diff --git a/backend/main.py b/backend/main.py
--- a/backend/main.py
+++ b/backend/main.py
@@ -10,6 +10,7 @@
 from backend.utils.nl_formatter import ensure_natural
 from backend.utils.agent_protocol import AgentResponse
 from backend.services import conversation as conv
+from backend.logging_utils import configure_logging
 from backend.middleware.request_logging import add_request_logging
 
 app = FastAPI(title="Personal Agent API")
@@ -20,5 +21,6 @@
 
 # Configure logging
+configure_logging()
 
 # Add request logging middleware
 add_request_logging(app)
