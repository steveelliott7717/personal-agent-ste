diff --git a/backend/logging_utils.py b/backend/logging_utils.py
--- /dev/null
+++ b/backend/logging_utils.py
@@ -0,0 +1,34 @@
+from contextvars import ContextVar
+import logging
+
+correlation_id_var = ContextVar("correlation_id", default=None)
+
+def get_correlation_id() -> str:
+    """Retrieve the current correlation ID."""
+    return correlation_id_var.get()
+
+def set_correlation_id(correlation_id: str) -> None:
+    """Set the current correlation ID."""
+    correlation_id_var.set(correlation_id)
+
+class CorrelationIdFilter(logging.Filter):
+    """Logging filter to add correlation ID to log records."""
+
+    def filter(self, record: logging.LogRecord) -> bool:
+        record.correlation_id = get_correlation_id()
+        return True
+
+def configure_logging() -> None:
+    """Configure logging to include correlation ID."""
+    logging.basicConfig(level=logging.INFO)
+    logger = logging.getLogger()
+    logger.addFilter(CorrelationIdFilter())
+
+    # Example of adding a handler that formats the log messages
+    handler = logging.StreamHandler()
+    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s - Correlation ID: %(correlation_id)s')
+    handler.setFormatter(formatter)
+    logger.addHandler(handler)
+
+    logger.info("Logging configured with correlation ID support.")
+
diff --git a/backend/middleware/request_logging.py b/backend/middleware/request_logging.py
--- /dev/null
+++ b/backend/middleware/request_logging.py
@@ -0,0 +1,33 @@
+import logging
+import uuid
+from starlette.middleware.base import BaseHTTPMiddleware
+from starlette.middleware.cors import CORSMiddleware
+from fastapi import Request
+from logging_utils import set_correlation_id
+
+class RequestLoggingMiddleware(BaseHTTPMiddleware):
+    async def dispatch(self, request: Request, call_next):
+        correlation_id = str(uuid.uuid4())
+        set_correlation_id(correlation_id)
+
+        logger = logging.getLogger()
+        logger.info(f"Start request: {request.method} {request.url} - Correlation ID: {correlation_id}")
+
+        response = await call_next(request)
+
+        logger.info(f"End request: {request.method} {request.url} - Correlation ID: {correlation_id}")
+
+        return response
+
+def add_cors_middleware(app):
+    app.add_middleware(
+        CORSMiddleware,
+        allow_origins=["*"],
+        allow_credentials=True,
+        allow_methods=["*"],
+        allow_headers=["*"],
+    )
+
+def add_request_logging_middleware(app):
+    app.add_middleware(RequestLoggingMiddleware)
+
diff --git a/backend/main.py b/backend/main.py
--- a/backend/main.py
+++ b/backend/main.py
@@ -10,4 +10,5 @@
 from fastapi.staticfiles import StaticFiles
+from logging_utils import configure_logging
 from starlette.middleware.base import BaseHTTPMiddleware
 from dotenv import load_dotenv
 load_dotenv()
@@ -25,6 +26,7 @@
 # backend/main.py
 app = FastAPI(title="Personal Agent API")
 
+configure_logging()
 
 @app.get("/app/api/debug/supabase-key")
 async def debug_supabase_key():
