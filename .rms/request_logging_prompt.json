{
    "task": "Role: Implement minimal request logging + correlation IDs for FastAPI.\n\nContext: The personal-agent-ste backend needs per-request correlation IDs to aid debugging and cross-system tracing. We must keep the change small, dependency-light, and fully backward compatible (no response schema changes).\n\nRequirements:\n1) Add a middleware under backend/ that:\n   - On each request, generates a UUID4 correlation ID.\n   - Stores it on request.state.correlation_id.\n   - Optionally logs one line at request start/finish including method, path, status, duration, and correlation_id when LOG_REQUESTS is enabled (default true).\n   - Uses a contextvars.ContextVar to hold the correlation_id for the lifetime of the request and clears it after.\n2) Add a tiny logging utility (no heavy deps) that:\n   - Defines a logging.Filter reading the correlation_id from a ContextVar and injecting it into the LogRecord (e.g., record.correlation_id).\n   - Configures base logging format to include %(correlation_id)s (fall back to '-' when absent) without breaking existing logs.\n   - Applies the filter to the root logger so all loggers inherit it, ensuring every log line within a request includes the correlation_id.\n3) Respect an env var LOG_REQUESTS (default true). When false, the middleware still sets correlation_id ContextVar/state but does not emit request start/finish logs.\n4) Do not change any API response shapes and do not introduce heavy dependencies (standard library only).\n5) Keep changes scoped to backend/; wire-up should happen in the FastAPI app initialization path used in production.\n\nAcceptance Criteria:\n- A file such as backend/middleware/request_logging.py provides the middleware and ContextVar wiring.\n- A file such as backend/logging_utils.py provides the Filter and a helper to configure root logging format with %(correlation_id)s.\n- backend/api.py (or the main FastAPI app factory) initializes logging via logging_utils and registers the middleware.\n- request.state.correlation_id is set for every request; correlation_id appears in ALL log lines produced during that request.\n- With LOG_REQUESTS=true (default), logs include a single-line entry with method, path, correlation_id, status, and duration.\n- With LOG_REQUESTS=false, request start/finish lines are suppressed, but other logs still include correlation_id.\n- No response payloads change; no new heavy deps.\n\nVerification Steps:\n1) Build & deploy.\n2) Set LOG_REQUESTS=true in the environment. Hit GET /health and one additional existing endpoint (e.g., /app/api/... if present).\n3) Inspect logs (e.g., `fly logs --since 5m`) and verify lines contain: method=..., path=..., status=..., duration_ms=..., correlation_id=<uuid>.\n4) Confirm that any other logs emitted during the request also include correlation_id in their line format.\n5) Toggle LOG_REQUESTS=false, repeat requests, and verify only the middleware request lines are suppressed while all other logs still include correlation_id.\n\nConstraints:\n- Python stdlib only; no structlog or external logging frameworks.\n- Backward compatible; no API or response schema changes.\n- Keep diffs minimal and confined to backend/.\n\nOutput format:\n- Return a unified diff patch modifying/adding files only under backend/ that implements the above.\n",
    "repo": "personal-agent-ste",
    "branch": "main",
    "path_prefix": "backend/",
    "k": 12,
    "session": "s1"
}