diff --git a/backend/logging_utils.py b/backend/logging_utils.py
--- /dev/null
+++ b/backend/logging_utils.py
@@ -0,0 +1,108 @@
+from __future__ import annotations
+import os
+import time
+import uuid
+import logging
+from contextvars import ContextVar
+from typing import Optional
+
+from starlette.middleware.base import BaseHTTPMiddleware
+from starlette.requests import Request
+from fastapi.responses import JSONResponse
+
+# ContextVar to hold correlation id per request/task
+correlation_id_ctx: ContextVar[Optional[str]] = ContextVar("correlation_id", default=None)
+
+
+class CorrelationIdFilter(logging.Filter):
+    def filter(self, record: logging.LogRecord) -> bool:
+        cid = correlation_id_ctx.get()
+        record.cid = cid if cid else "-"  # add 'cid' attribute for formatters
+        return True
+
+
+_LOGGING_CONFIGURED = False
+
+
+def _env_truthy(value: Optional[str], default: bool = True) -> bool:
+    if value is None:
+        return default
+    return value.strip().lower() in {"true", "1", "t", "yes", "y", "on"}
+
+
+def log_requests_enabled() -> bool:
+    return _env_truthy(os.getenv("LOG_REQUESTS"), default=True)
+
+
+def setup_logging() -> None:
+    global _LOGGING_CONFIGURED
+    if _LOGGING_CONFIGURED:
+        return
+    _LOGGING_CONFIGURED = True
+
+    cid_filter = CorrelationIdFilter()
+    root = logging.getLogger()
+
+    # If no handlers configured yet, set a sensible default with cid
+    if not root.handlers:
+        handler = logging.StreamHandler()
+        handler.setFormatter(logging.Formatter("%(asctime)s %(levelname)s [cid=%(cid)s] %(name)s: %(message)s"))
+        handler.addFilter(cid_filter)
+        root.addHandler(handler)
+        root.setLevel(logging.INFO)
+    else:
+        # Ensure existing handlers include the cid filter and a formatter that supports %(cid)s
+        for h in root.handlers:
+            try:
+                fmt = getattr(h.formatter, "_fmt", "") if h.formatter else ""
+            except Exception:
+                fmt = ""
+            if "%(cid)" not in fmt:
+                try:
+                    h.setFormatter(logging.Formatter("%(asctime)s %(levelname)s [cid=%(cid)s] %(name)s: %(message)s"))
+                except Exception:
+                    pass
+            h.addFilter(cid_filter)
+
+    # Attach filter to common loggers used by FastAPI/Uvicorn
+    for name in ("uvicorn", "uvicorn.error", "uvicorn.access", "fastapi"):
+        logging.getLogger(name).addFilter(cid_filter)
+
+
+class RequestLoggingMiddleware(BaseHTTPMiddleware):
+    def __init__(self, app):
+        super().__init__(app)
+        self.logger = logging.getLogger("request")
+
+    async def dispatch(self, request: Request, call_next):
+        cid = request.headers.get("X-Correlation-ID") or str(uuid.uuid4())
+        token = correlation_id_ctx.set(cid)
+        request.state.correlation_id = cid
+
+        start = time.time()
+        status_code = 500
+        response = None  # type: ignore[assignment]
+        try:
+            if log_requests_enabled():
+                self.logger.info("â†’ %s %s", request.method, request.url.path)
+            response = await call_next(request)
+            status_code = getattr(response, "status_code", 200)
+        except Exception as e:
+            if log_requests_enabled():
+                self.logger.exception("âœ– %s %s error: %s", request.method, request.url.path, e)
+            response = JSONResponse({"detail": "Internal Server Error"}, status_code=500)
+            status_code = 500
+        finally:
+            dur_ms = int((time.time() - start) * 1000)
+            try:
+                # Ensure clients can read the correlation ID from responses
+                response.headers["X-Correlation-ID"] = cid  # type: ignore[index]
+            except Exception:
+                pass
+            if log_requests_enabled():
+                self.logger.info("â† %s %s %s %dms", request.method, request.url.path, status_code, dur_ms)
+            try:
+                correlation_id_ctx.reset(token)
+            except Exception:
+                correlation_id_ctx.set(None)
+        return response
diff --git a/backend/main.py b/backend/main.py
--- /dev/null
+++ b/backend/main.py
@@ -20,6 +20,7 @@
 from backend.utils.nl_formatter import ensure_natural
 from backend.utils.agent_protocol import AgentResponse
 from backend.services import conversation as conv
+from backend.logging_utils import RequestLoggingMiddleware, setup_logging
 
 
 app = FastAPI(title="Personal Agent API")
--- /dev/null
+++ b/backend/main.py
@@ -29,10 +30,13 @@
 from fastapi import FastAPI
 import os
 
 app = FastAPI()
 
+# Initialize structured logging with correlation IDs
+setup_logging()
+
 @app.get("/app/api/debug/supabase-key")
 async def debug_supabase_key():
     key = os.getenv("SUPABASE_SERVICE_ROLE")
     if key:
         return {"SUPABASE_SERVICE_ROLE_start": key[:8] + "..."}
--- /dev/null
+++ b/backend/main.py
@@ -139,8 +143,9 @@
                 status_code=500,
             )
 
+app.add_middleware(RequestLoggingMiddleware)
 app.add_middleware(NaturalLanguageMiddleware)
 
 # -------------------- Helpers --------------------
 def _extract_query(query: str | None, body: Dict[str, Any] | None) -> Tuple[str | None, Dict[str, Any] | None]:
     """
--- /dev/null
+++ b/backend/main.py
